#!/bin/bash
### TODO
###
### check variables for $0 login
###
###

# Configuration variables
HOST="mafreebox.freebox.fr"
VERSION="0.1"
CONF="${HOME}/.freeboxsnmp"

# Autopopulate variables
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
UA="Fbx SNMP Stats v${VERSION}"
C=$(which curl)
CURL="${C} -s -4 -A ${UA}"
API="${DIR}/api.sh"

[ ! -x ${C} ] && { echo "Curl is not installed."; exit 1; }
[ -e ${API} ] && source ${API} || { echo "API is not present."; exit 2; }
_check_freebox_api

# Conf management
_reset_conf() {
  echo "APP_NAME=\"fr.freebox.hebeo.snmp\"
APP_FULL_NAME=\"Freebox OS SNMP Bash interface\"
APP_VERSION=\"${VERSION}\"
APP_OS=\"${HOSTNAME}\"
APP_ID=\"fr.freebox.hebeo.snmp\"
APP_TOKEN=\"\"
_SESSION_TOKEN=\"\"
" >${CONF}
}
_save_conf() {
  echo "APP_NAME=\"fr.freebox.hebeo.snmp\"
APP_FULL_NAME=\"Freebox OS SNMP Bash interface\"
APP_VERSION=\"${VERSION}\"
APP_OS=\"$(HOSTNAME)\"
APP_ID=\"fr.freebox.hebeo.snmp\"
APP_TOKEN=\"${APP_TOKEN}\"
_SESSION_TOKEN=\"${_SESSION_TOKEN}\"
" >${CONF}
}

[ ! -e ${CONF} ] && { touch ${CONF}; _reset_conf; }
source ${CONF}

### We check if we are already authorize.
if [ "z$APP_ID" == "z" ]; then
  if [ $# -eq 0 ]; then
    echo "You need to call \"$0 auth\"  to initiate App Authorization."
    exit 4
  else
    if [ $1 == "login" ]; then
      # We don't exit if we call login
      echo "" >/dev/null
    elif [ $1 == "auth" ]; then
      # We don't exit if we call auth
      echo "" >/dev/null
    else
      echo "You need to call \"$0 auth\"  to initiate App Authorization."
      exit 8
fi; fi; fi

### Calls

FbxAuth() {
  authorize_application ${APP_NAME} "${APP_FULL_NAME}" ${APP_VERSION} ${APP_OS}
  [ $? -eq 0 ] && echo "Call \"$0 login MY_APP_TOKEN\" to first log application in the FreeBOX." || echo "Fail to auth. Please retry."
}

FbxLogin() {
  APP_TOKEN=$1
  local answer=$(call_freebox_api /login/)
  local password=$(echo -n "$(get_json_value_for_key "${answer}" "result.challenge")" | openssl dgst -sha1 -hmac "$APP_TOKEN" | sed  's/^(stdin)= //')
  local data="{\"app_id\": \"${APP_ID}\",\"password\": \"${password}\"}"
  _SESSION_TOKEN=$(get_json_value_for_key "$(call_freebox_api /login/session/ "${data}")" "result.session_token")
  _save_conf
  FbxChkLogin
}

FbxRelog() {
  FbxLogin ${APP_TOKEN}
}

FbxChkLogin() {
  [ $(get_json_value_for_key "$(call_freebox_api /login/)" "result.logged_in") == "true" ] && echo "We are logged in." || echo "We are not logged in."
}

FbxSystem() {
  if [ $# -eq 0 ]; then
    local answer=$(call_freebox_api /system/)
    dump_json_keys_values "${answer}"
  else
    case $1 in
      mac)
        FbxGetValue system mac
        ;;
      fan_rpm)
        FbxGetValue system fan_rpm
        ;;
      temp_sw)
        FbxGetValue system temp_sw
        ;;
      uptime)
        FbxGetValue system uptime
        ;;
      uptime_raw)
        FbxSystemUptime
        ;;
      board_name)
        FbxGetValue system board_name
        ;;
      temp_cpub)
        FbxGetValue system temp_cpub
        ;;
      temp_cpum)
        FbxGetValue system temp_cpum
        ;;
      serial)
        FbxGetValue system serial
        ;;
      firmware_version)
        FbxGetValue system firmware_version
        ;;
      *)
        echo "This choice is not available for /system/."; exit 2048
        ;;
    esac
  fi
}

FbxGetValue() {
  [ $# -eq 0 ] && { echo "You need to pass one or more parameters to FbxGetValue."; exit 1024; }
  local request="/"
  while [ $# -ge 2 ]; do
    request="${request}$1/"
    shift
  done
  local answer=$(call_freebox_api "${request}")
  get_json_value_for_key "${answer}" "result.$1"
}

FbxSystemUptime() {
  local uptime=$(FbxGetValue system uptime)
  _parse_uptime ${uptime}
}

_parse_uptime() {
  [ $# -eq 0 ] && { echo "You need to pass one or more parameters to FbxGetValue."; exit 1024; }
  local raw_uptime=0
  local mult=
  while [ $# -ge 1 ]; do
    local add=
    case $2 in
      jour) mult=86400;;
      jours) mult=86400;;
      heure) mult=3600;;
      heures) mult=3600;;
      minute) mult=60;;
      minutes) mult=60;;
      seconde) mult=1;;
      secondes) mult=1;;
    esac
    raw_uptime=$(( ${raw_uptime} + $(( $1 * ${mult} )) ))
    shift; shift
  done
  echo ${raw_uptime}
}

### Main Loop
case $1 in
  version)
    echo ${_API_VERSION}
    ;;
  auth)
    FbxAuth;;
  login)
    FbxLogin $2;;
  relog)
    FbxRelog;;
  chk_login)
    FbxChkLogin;;
  logout)
    call_freebox_api "/login/logout";;
  reboot)
    call_freebox_api "/system/reboot";;
  system)
    FbxSystem $2;;
  rrd)
    case $2 in
      adsl) db=dsl;;
      dsl) db=dsl;;
      net) db=net;;
      switch) db=switch;;
      temp) db=temp;;
      xdsl) db=dsl;;
      *) echo "Choice for rrd is : dsl, net, switch, temp"; exit 16;;
    esac
    if [ $# -ge 3 ]; then
      case ${db} in
        temp)
          case $3 in
            cpum)
              ;;
            cpub)
              ;;
            sw)
              ;;
            hdd)
              ;;
            fan_speed)
              ;;
            *)
              echo "This choice is not available for db ${db}."
              exit 64
              ;;
          esac
          ;;
        net)
          case ${db} in
            bw_up)
              ;;
            bw_down)
              ;;
            rate_up)
              ;;
            rate_down)
              ;;
            vpn_rate_up)
              ;;
            vpn_rate_down)
              ;;
            *)
              echo "This choice is not available for db ${db}."
              exit 128
              ;;
          esac
          ;;
        switch)
          case ${db} in
            rx_1)
              ;;
            tx_1)
              ;;
            rx_2)
              ;;
            tx_2)
              ;;
            rx_3)
              ;;
            tx_3)
              ;;
            rx_4)
              ;;
            tx_4)
              ;;
            *)
              echo "This choice is not available for db ${db}."
              exit 256
              ;;
          esac
          ;;
        dsl)
          case ${db} in
            rate_up)
              ;;
            rate_down)
              ;;
            snr_up)
              ;;
            snr_down)
              ;;
            *)
              echo "This choice is not available for db ${db}."
              exit 512
              ;;
          esac
          ;;
        *)
          exit 32;
      esac
    fi
    answer=$(call_freebox_api "/rrd/")
    dump_json_keys_values "${answer}"
    ;;
  *)
    echo "Not implemented."
    ;;
esac
